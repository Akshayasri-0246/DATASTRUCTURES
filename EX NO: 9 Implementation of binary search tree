#include <stdio.h>
#include <stdlib.h>

// Define the structure for a binary search tree node
typedef struct Node {
    int key;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int key) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a key into the binary search tree
Node* insert(Node* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }

    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }

    return root;
}

// Function to find the minimum key in a subtree
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left != NULL) {
        current = current->left;
    }
    return current;
}

// Function to delete a key from the binary search tree
Node* deleteNode(Node* root, int key) {
    if (root == NULL) {
        return root;
    }

    if (key < root->key) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->key) {
        root->right = deleteNode(root->right, key);
    } else {
        if (root->left == NULL) {
            Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            free(root);
            return temp;
        }

        root->key = minValueNode(root->right)->key;
        root->right = deleteNode(root->right, root->key);
    }
    return root;
}

// Function to search for a key in the binary search tree
Node* search(Node* root, int key) {
    if (root == NULL || root->key == key) {
        return root;
    }

    if (key < root->key) {
        return search(root->left, key);
    }

    return search(root->right, key);
}

// Function for inorder traversal of the binary search tree
void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

// Function to display the binary search tree
void display(Node* root) {
    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");
}

int main() {
    Node* root = NULL;

    // Ask the user for the number of keys
    int numKeys;
    printf("Enter the number of keys: ");
    scanf("%d", &numKeys);

    // Ask the user for each key
    for (int i = 0; i < numKeys; i++) {
        int key;
        printf("Enter key %d: ", i + 1);
        scanf("%d", &key);

        // Insert the key into the binary search tree
        root = insert(root, key);
    }

    // Display the binary search tree
    display(root);

    // Ask the user for a key to search
    int keyToSearch;
    printf("Enter a key to search: ");
    scanf("%d", &keyToSearch);

    // Search for the key in the binary search tree
    Node* result = search(root, keyToSearch);
    if (result != NULL) {
        printf("%d found in the binary search tree\n", keyToSearch);
    } else {
        printf("%d not found in the binary search tree\n", keyToSearch);
    }

    // Ask the user for a key to delete
    int keyToDelete;
    printf("Enter a key to delete: ");
    scanf("%d", &keyToDelete);

    // Delete the key from the binary search tree
    root = deleteNode(root, keyToDelete);

    // Display the binary search tree after deletion
    printf("Inorder traversal after deletion: ");
    inorder(root);
    printf("\n");

    return 0;
}
