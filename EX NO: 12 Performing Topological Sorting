#include <stdio.h>

// Function to add a directed edge from 'start' to 'end'
void addDirectedEdge(int graph[][100], int start, int end) {
    graph[start][end] = 1;
}

// Recursive function for topological sorting
void topologicalSortUtil(int graph[][100], int currentVertex, int visited[][100], int stack[][100], int *stackIndex) {
    visited[currentVertex][0] = 1;

    for (int i = 0; i < 100; i++) {
        if (graph[currentVertex][i] && !visited[i][0]) {
            topologicalSortUtil(graph, i, visited, stack, stackIndex);
        }
    }

    stack[(*stackIndex)++] = currentVertex;
}

// Function to perform topological sorting
void topologicalSort(int graph[][100], int vertices) {
    int visited[100][100] = {0};
    int stack[100][100];
    int stackIndex = 0;

    for (int i = 0; i < vertices; i++) {
        if (!visited[i][0]) {
            topologicalSortUtil(graph, i, visited, stack, &stackIndex);
        }
    }

    printf("Topological Sorting Order: ");
    while (stackIndex > 0) {
        printf("%d ", stack[0][--stackIndex]);
    }
    printf("\n");
}

int main() {
    int vertices, edges;

    // Input the number of vertices
    printf("Input the number of vertices: ");
    scanf("%d", &vertices);

    if (vertices <= 0 || vertices > 100) {
        printf("Invalid number of vertices. Exiting...\n");
        return 1;
    }

    int graph[100][100] = {0}; // Initialize the adjacency matrix with zeros

    // Input the number of edges
    printf("Input the number of edges: ");
    scanf("%d", &edges);

    if (edges < 0 || edges > vertices * (vertices - 1)) {
        printf("Invalid number of edges. Exiting...\n");
        return 1;
    }

    // Input edges and construct the adjacency matrix
    for (int i = 0; i < edges; i++) {
        int start, end;
        printf("Input edge %d (start end): ", i + 1);
        scanf("%d %d", &start, &end);

        // Validate input vertices
        if (start < 0 || start >= vertices || end < 0 || end >= vertices) {
            printf("Invalid vertices. Try again.\n");
            i--;
            continue;
        }

        addDirectedEdge(graph, start, end);
    }

    // Perform topological sorting
    topologicalSort(graph, vertices);

    return 0;
}
