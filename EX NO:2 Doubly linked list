#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *prev;
    struct node *next;
};

struct node *head=NULL;

void ainsertion();
void binsertion();
void cinsertion();
void adeletion();
void bdeletion();
void cdeletion();
void searching();
void display();
void traverse();

void main()
{
    int choice=0;
    while (choice<=10)
    {
        printf("Enter choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                ainsertion();
                break;
            case 2:
                binsertion();
                break;
            case 3:
                cinsertion();
                break;
            case 4:
                adeletion();
                break;
            case 5:
                bdeletion();
                break;
            case 6:
                cdeletion();
                break;
            case 7:
                searching();
                break;
            case 8:
                display();
                break;
            case 9:
                traverse();
                break;
            case 10:
                exit(0);
                break;
        }
    }
}

void ainsertion()
{
    struct node *newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    
    if(newnode==NULL)
    {
        printf("OVERFLOW");
    }
    else
    {
        printf("Enter data");
        scanf("%d",&newnode->data);
        newnode->prev=NULL;
        newnode->next=NULL;
        
        if(head==NULL)
        {
            head=newnode;
        }
        else
        {
            newnode->next=head;
            head->prev=newnode;
            head=newnode;
        }
    }
}

void binsertion()
{
    struct node *newnode,*prevnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    
    if(newnode==NULL)
    {
        printf("OVERFLOW");
    }
    else
    {
        printf("Enter data");
        scanf("%d",&newnode->data);
        newnode->prev=NULL;
        newnode->next=NULL;
        
        if(head==NULL)
        {
            head=newnode;
        }
        else
        {
            prevnode=head;
            while(prevnode->next!=NULL)
            {
                prevnode=prevnode->next;
            }
            prevnode->next=newnode;
            newnode->prev=prevnode;
        }
        
    }
}

void cinsertion()
{
    struct node *newnode,*nextnode,*prevnode;
    int pos,count=1,i=1;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("Enter position");
    scanf("%d",&pos);
    
    if(newnode==NULL)
    {
        printf("OVERFLOW");
    }
    else
    {
        printf("Enter data");
        scanf("%d",&newnode->data);
        newnode->prev=NULL;
        newnode->next=NULL;
        
        if(pos==1)
        {
            if(head==NULL)
            {
                head=newnode;
            }
            else
            {
                newnode->next=head;
                head->prev=newnode;
                head=newnode;
            }
        }
        else
        {
            prevnode=head;  
            while(prevnode->next!=NULL)
            { 
                prevnode=prevnode->next;
                count++;
            }
        
            if(pos<=count)
            {
                nextnode=head;
                while(i<pos)
                {
                    nextnode=nextnode->next;
                    i++;
                }
                newnode->prev=nextnode->prev;
                newnode->next=nextnode;
                nextnode->prev->next=newnode;
                nextnode->prev=newnode;
            }
            else if (pos==count+1)
            {
                prevnode=head; 
                while(prevnode->next!=NULL)
                {  
                    prevnode=prevnode->next;
                }
                prevnode->next=newnode;
                newnode->prev=prevnode;
            }
            else
            {
                printf("OUT OF LIST");
            }
        }
    }
}

void adeletion()
{
    struct node *delnode;
    
    if(head==NULL)
    {
        printf("UNDERFLOW/EMPTY LIST");
    }
    else
    {
        if(head->next==NULL)
        {
            delnode=head;
            head=NULL;
            
            free(delnode);
        }
        else
        {
           delnode=head;
           head->next->prev=NULL;
           head=head->next;
           delnode->next=NULL;
           
           free(delnode);
        }
    
    }
}

void bdeletion()
{
    struct node *delnode;
            
    if(head==NULL)
    {
        printf("UNDERFLOW/EMPTY LIST");
    }
    else
    {
        if(head->next==NULL)
       {
           delnode=head;
           head=NULL;
                    
           free(delnode);
       }
       else
       {
           delnode=head;
           while(delnode->next!=NULL)
           {
                delnode=delnode->next;
           }
           delnode->prev->next=NULL;
           delnode->prev=NULL;
                    
           free(delnode);
        }
    }
}


void cdeletion()
{
    struct node *delnode;
    int pos,count=1,i=1;
    printf("Enter position");
    scanf("%d",&pos);
    
    if(head==NULL)
    {
        printf("UNDERFLOW/EMPTY LIST");
    }
    else
    {
        if(pos==1)
        {
            if(head->next==NULL)
            {
                delnode=head;
                head=NULL;
                
                free(delnode);
            }
            else
            {
                delnode=head;
                head=delnode->next;
                delnode->next->prev=NULL;
                delnode->next=NULL;
                
                free(delnode);
            }
        }
        else
        {
            delnode=head;
            while(delnode->next!=NULL)
            {
                delnode=delnode->next;
                count++;
            }
        
            if(pos<=count)
            {
                delnode=head;
                while(i<pos)
                {
                    delnode=delnode->next;
                    i++;
                    
                }
                if(delnode->next==NULL)
                {
                    delnode->prev->next=delnode->next;
                    
                    delnode->next=NULL;
                    delnode->prev=NULL;
                
                    free(delnode);
                }
                else
                {
                    delnode->prev->next=delnode->next;
                    delnode->next->prev=delnode->prev;
                    
                    delnode->next=NULL;
                    delnode->prev=NULL;
                
                    free(delnode);
                }
            }
            else
            {
                printf("OUT OF LIST");
            }
        }
    }
}
void searching()
{
    struct node *node;
    int val,pos=1,flag=1;
    printf("Enter value");
    scanf("%d",&val);
    
    if(head==NULL)
    {
        printf("EMPTY LIST");
    }
    else
    {
        node=head;
        while(node!=NULL)
        {
            if(node->data==val)
            {
               printf("%d",pos);
               flag=0;
               break;
            }
            else
            {
                node=node->next;
                pos++;
            }
        }
        
        if(flag)
             printf("DATA NOT FOUND");
    }
}

void display()
{
    struct node *nodes;
    
    if(head==NULL)
    {
        printf("EMPTY LIST");
    }
    else
    {
        nodes=head;
        while(nodes!=NULL)
        {
            printf("%d ",nodes->data);
            nodes=nodes->next;
        }
        printf("\n");
    }
}

void traverse()
{
    struct node *node;
    int pos=1,spos,flag=1;
    printf("enter the position to know that position's data");
    scanf("%d",&spos);
    
    if(head==NULL)
    {
       printf("EMPTY LIST"); 
    }
    else
    {
        node = head;
        while(node!=NULL)
        {
            if(pos==spos)
            {
                printf("%d",node->data);
                flag=0;
            }
            node=node->next;
            pos++;
        } 
    }
    if(flag)
        printf("POSITION NOT FOUND");
}
