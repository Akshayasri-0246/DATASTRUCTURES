//queue using array 

#include <stdio.h>
#include <stdlib.h>

int n;
int queue[1000];
int front =-1;
int rear =-1;

int isfull();
int isempty();
void enqueue();
void dequeue();
void peek();
void back();
void print();

void main()
{
    int choice;
    printf("THE NUMBER OF ELEMENTS ");
    scanf("%d",&n);
    
    do
    {
        printf("ENTER THE CHOICE ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
               enqueue();
               break;
            case 2:
               dequeue();
               break;
            case 3:
               peek();
               break;
            case 4:
               back();
               break;
            case 5:
               print();
               break;
            case 6:
               exit(0);
               break;
               
               
        }
    }
    while(choice!=6);
}


int isfull()
{
    if(rear==n-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isempty()
{
    if(front==-1 && rear==-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void enqueue()
{
    int x;
    if(isfull())
    {
        printf("OVERFLOW ");
    }
    else
    {
        printf("ENTER THE DATA ");
        scanf("%d",&x);
        
        if(isempty())
        {
            front=rear=0;
            queue[front]=x;
        }
        else
        {
            rear++;
            queue[rear]=x;
        }
    }
}

void dequeue()
{
    int x;
    if(isempty())
    {
        printf("UNDERFLOW ");
    }
    else
    {
        if(front==rear)
        {
            x=queue[front];
            front=rear=-1;
        }
        else
        {
            x=queue[front];
            front++;
        }
        printf("THE DELETED DATA IS ");
        printf("%d ",x);
    }
}

void peek()
{
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE FRONT DATA IS ");
        printf("%d ",queue[front]);
    }
}

void back()
{
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE REAR DATA IS ");
        printf("%d ",queue[rear]);
    }
}

void print()
{
    int i;
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE DATAS IN THE QUEUE ARE ");
        i=front;
        while(i<=rear)
        {
            printf("%d ",queue[i]);
            i++;
        }
    }
}


//queue using linked list

#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};

struct node *front=NULL;
struct node *rear=NULL;

int isempty();
void enqueue();
void dequeue();
void peek();
void back();
void print();
void size();

void main()
{
    int choice;
    do
    {
        printf("ENTER THE CHOICE ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
               enqueue();
               break;
            case 2:
               dequeue();
               break;
            case 3:
               peek();
               break;
            case 4:
               back();
               break;
            case 5:
               print();
               break;
            case 6:
               size();
               break;
            case 7:
               exit(0);
               break;
        }
    }
    while(choice!=7);
}

int isempty()
{
    if (front==NULL && rear==NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void enqueue()
{
    int x;
    struct node *newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    
    if(newnode==NULL)
    {
        printf("OVERFLOW ");
    }
    else
    {
        printf("ENTER THE DATA ");
        scanf("%d",&x);
        newnode->data=x;
        newnode->next=NULL;
        
        if(isempty())
        {
            front=rear=newnode;
        }
        else
        {
            rear->next=newnode;
            rear=newnode;
        }
    }
}

void dequeue()
{
    int x;
    struct node *temp;
    if(isempty())
    {
        printf("UNDERFLOW ");
    }
    else
    {
        if(front==rear)
        {
            temp=front;
            x=temp->data;
            front=rear=NULL;
            
            free(temp);
        }
        else
        {
            temp=front;
            x=temp->data;
            front=front->next;
            
            free(temp);
        }
        printf("THE DELETED DATA IS ");
        printf("%d ",x);
    }
}

void peek()
{
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE FRONT DATA IS ");
        printf("%d ",front->data);
    }
}

void back()
{
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE REAR DATA IS ");
        printf("%d ",rear->data);
    }
}

void print()
{
    struct node *temp;
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        printf("THE ALL DATAS IN QUEUE ");
        temp=front;
        while(temp!=NULL)
        {
            printf("%d ",temp->data);
            temp=temp->next;
        }
    }
}

void size()
{
     struct node *temp;
     int count=0;
    if(isempty())
    {
        printf("EMPTY LIST ");
    }
    else
    {
        temp=front;
        while(temp!=NULL)
        {
            count++;
            temp=temp->next;
        }
        printf("%d ",count);
    }   
}
