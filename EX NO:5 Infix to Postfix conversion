#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to check if a character is an operand
int isOperand(char c) {
    if (c >= '0' && c <= '9' || c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {
        return 1;
    }
    return 0;
}

// Function to check if a character is an operator
int isOperator(char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
        return 1;
    }
    return 0;
}

// Function to check if a character is an opening parenthesis
int isOpeningParenthesis(char c) {
    if (c == '(') {
        return 1;
    }
    return 0;
}

// Function to check if a character is a closing parenthesis
int isClosingParenthesis(char c) {
    if (c == ')') {
        return 1;
    }
    return 0;
}

// Function to check the precedence of an operator
int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    } else if (c == '^') {
        return 3;
    }
    return 0;
}

// Function to convert infix to postfix
void infixToPostfix(char* infix, char* postfix) {
    int i, j = 0;
    char stack[100];
    int top = -1;

    for (i = 0; infix[i]; i++) {
        if (isOperand(infix[i])) {
            postfix[j++] = infix[i];
        } else if (isOperator(infix[i])) {
            while (top >= 0 && precedence(stack[top]) >= precedence(infix[i])) {
                postfix[j++] = stack[top--];
            }
            stack[++top] = infix[i];
        } else if (isOpeningParenthesis(infix[i])) {
            stack[++top] = infix[i];
        } else if (isClosingParenthesis(infix[i])) {
            while (stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            top--;
        }
    }

    while (top >= 0) {
        postfix[j++] = stack[top--];
    }
    postfix[j] = '\0';
}

int main() {
    char infix[100] = "a*(b+c+d)";
    char postfix[100];

    infixToPostfix(infix, postfix);

    printf("Infix expression: %s\n", infix);
    printf("Postfix expression: %s\n", postfix);

    return 0;
}
