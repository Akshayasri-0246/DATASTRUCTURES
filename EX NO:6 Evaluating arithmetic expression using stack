#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent a node in the stack
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to push an element onto the stack
void push(Node** top, int data) {
    Node* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
}

// Function to pop an element from the stack
int pop(Node** top) {
    if (*top == NULL) {
        printf("Error: Stack underflow\n");
        return -1;
    }
    Node* temp = *top;
    int data = temp->data;
    *top = (*top)->next;
    free(temp);
    return data;
}

// Function to evaluate an arithmetic expression
int evaluateExpression(char* expression) {
    Node* top = NULL;
    int i;

    for (i = 0; expression[i]; i++) {
        if (expression[i] >= '0' && expression[i] <= '9') {
            push(&top, expression[i] - '0');
        } else {
            int operand2 = pop(&top);
            int operand1 = pop(&top);

            switch (expression[i]) {
                case '+':
                    push(&top, operand1 + operand2);
                    break;
                case '-':
                    push(&top, operand1 - operand2);
                    break;
                case '*':
                    push(&top, operand1 * operand2);
                    break;
                case '/':
                    push(&top, operand1 / operand2);
                    break;
                default:
                    printf("Error: Invalid operator\n");
                    return -1;
            }
        }
    }

    return pop(&top);
}

int main() {
    char expression[] = "231*+9-";
    int result = evaluateExpression(expression);
    printf("Result: %d\n", result);
    return 0;
}
